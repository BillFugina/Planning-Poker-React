{
  /*
	// Place your snippets for TypeScript React here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
  */
  "React Stateless Component": {
    "prefix": "rsfc",
    "body": [
      "import * as React from 'react'",
      "",
      "interface IComponentProps { }",
      "",
      "const ${1:ComponentName}: React.StatelessComponent<IComponentProps> = props => {",
      "",
      "  const { children } = props",
      "",
      "  return (",
      "    <div>",
      "      {children}",
      "    </div>",
      "  )",
      "",
      "}",
      "",
      "${1:ComponentName}.defaultProps = { }",
      "",
      "export { IComponentProps, ${1:ComponentName} }",
      ""
    ],
    "description": "React Stateless Functional Component"
  },
  "React Component": {
    "prefix": "rc",
    "body": [
      "import * as React from 'react'",
      "import { withEnhancer, IWithEnhancerOwnProps, IWithEnhancerInjectedProps } from 'app/enhancers'",
      "",
      "interface IComponentOwnProps extends IWithEnhancerOwnProps { }",
      "",
      "type IComponentProps = IComponentOwnProps & IWithEnhancerInjectedProps",
      "",
      "interface IComponentState { }",
      "",
      "class ${1:ComponentName}Class extends React.Component<IComponentProps, IComponentState> {",
      "",
      "  static defaultProps: Partial<IComponentProps> = { }",
      "",
      "  render() {",
      "    const { children } = this.props",
      "    return (",
      "      <div>",
      "        {children}",
      "      </div>",
      "    )",
      "  }",
      "",
      "}",
      "",
      "const ${1:ComponentName} = withEnhancer()(${1:ComponentName}Class)",
      "",
      "export { ${1:ComponentName} }",
      ""
    ],
    "description": "React Component"
  },
  "React constructor": {
    "prefix": "rcc",
    "body": [
      "constructor(props: IComponentProps) {",
      "  super(props)",
      "  this.state = {}",
      "}"
    ]
  },
  "React componentWillMount": {
    "prefix": "rcwm",
    "body": [
      "componenetWilMount(): void {",
      "  return",
      "}"
    ]
  },
  "React componentDidMount": {
    "prefix": "rcdm",
    "body": [
      "componentDidMount(): void {",
      "  return",
      "}"
    ]
  },
  "React componentWillReceiveProps": {
    "prefix": "rcwrp",
    "body": [
      "componentWillReceiveProps(nextProps: IComponentProps): void {",
      "  return",
      "}"
    ]
  },
  "React shouldComponentUpdate": {
    "prefix": "rscu",
    "body": [
      "shouldComponentUpdate(nextProps: IComponentProps, nextState: IComponentState): boolean {",
      "  return true",
      "}"
    ]
  },
  "React componentWillUpdate": {
    "prefix": "rcwu",
    "body": [
      "componentWillUpdate(nextProps: IComponentProps, nextState: IComponentState): void {",
      "  return",
      "}"
    ]
  },
  "React componentDidUpdate": {
    "prefix": "rcdu",
    "body": [
      "componentDidUpdate(prevProps: IComponentProps, prevState: IComponentState): void {",
      "  return",
      "}"
    ]
  },
  "React componentWillUnmount": {
    "prefix": "rcwum",
    "body": [
      "componentWillUnmount(): void {",
      "  return",
      "}"
    ]
  }
}